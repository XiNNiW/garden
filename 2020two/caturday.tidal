:script "_functions.hs"

:t unzip



let drums p = note p #s "midi" #midichan 0 #octave 3
    wm a b p = whenmod a b (const p)
    -- sng cL c pL p vL v = wm l (vL+pL) c $ wm l vL p $ v
    --	where l = cL+vL+pL
    section n p ms = (n, p):ms
    -- loopend = []
    sng ms = qtrigger 1 $ seqPLoop $ structureSong 0 (reverse $ ms)
    structureSong _ [] = []
    structureSong start (t:ts) =  (start, end, (snd t)) : (structureSong end ts )
    	where end = start + (fst t)
		--p = snd t
    --structureSong st (p:ps) =  (st,(st+(fst p)),snd p) : (structureSong ((fst p)+st) ps )
    snpt = "{ ~ <1 . 1 . 1 . ~ 1> }%2"
    kkpt = "{<0 . 0 . 0*2 . 0 ~@2 0>}%2"
    hhpt = "{2 2 . <3 . ~ 2 . 3 . 2 2*3> 2 2 }%2"
    blue = "{d, e, f, g, a, bs, cs,d, fs, a}" :: Pattern Note
    green = "{d, e, f, g, a, as, c}" :: Pattern Note
    prog = sng $ [(16, green) , (8, blue) , (16, blue)]
    fp = fingerpick prog
    synth p = note (fp $ p) #s "midi" #midichan 2 #octave 4
    synth2 p = note (fp $ p) #s "midi" #midichan 4 #octave 4
    synth3 p = note (fp $ p) #s "midi" #midichan 5 #octave 4
    synth4 p = note (fp $ p) #s "midi" #midichan 6 #octave 5
    bass p = note (fp $ p) #s "midi" #midichan 1 #octave 4
    chchord = wm 8 5 ( synth ("{<11 [~ 10]>, [~@3 9], 5, 4}":: Pattern Int)) $ wm 5 2 (synth2 ("{<10 9 8 7 5>,<2 ~>,<~ 4>,7}":: Pattern Int)) $ synth3 ("[<0 -1 -2 -3 -4>,<[10 ~ 9 ~] ~>]" + (iter 8 $ run 8) ::Pattern Int)
    prchord = wm 4 3 "{5,9,11,14}" "{10,2,4,7}" :: Pattern Int
    vschord = (-| "<8 8 8 8 5 [5 4] 9 6>") $ whenmod 5 3 (+| "{0 . 1 2 3}%1") $ "<{0, 2, 5, 9} ~>" :: Pattern Int
    bbass =  bass $ mask (binary 2343) $ plyWith 4 (|+ "<1 3 2 4>") $ "{1,10,5,8}" 
in
do
d1 $ whenmod 16 14 (const silence) $ stack [
	drums $ sng 
	$ section 16 (wm 8 5 silence $ kkpt) 
	$ section 8 (iter 8 $ slow 7 $ kkpt + "9 10 11") 
	$ section 16 kkpt
	$ [],
	every 4 (sometimes ghost) $ drums $ snpt,
	drums $ sng 
	$ section 16 (wm 8 5 silence $ hhpt) 
	$ section 8 "2*<1 2 3 4 5 6 7 8>" 
	$ section 16 (wm 16 8 hhpt $ silence)
	$ [], 
	drums $ sng 
	$ section 16 (wm 8 5 silence $ (iter 8 $ run 8)) 
	$ section 8 silence 
	$ section 16 ( wm 16 12 ( struct (binary 2244) $ irand 16) silence)
	$ []
	]
d2 $ sng 
	$ section 16 (chchord) 
	$ section 8  (synth3 $ prchord) 
	$ section 16 (whenmod 8 7 ((# midichan 3).(plyWith 3 (|+ note 2))) $ synth vschord)
	$ []
d3 $ sng $ section 16 silence $ section 8 bbass $ section 16 silence $ []
d4 $ sng $ section 16 (wm 8 5 (synth4 $ mask (binary 2949) $ plyWith 4 (|+ "<0 -1 0 4>") $ "{7,9,10}") silence ) $ section 8 silence $ section 16 silence $ []

 


every 4 ((# midichan 3).rev.plyWith "1 2 3" (|* gain 0.5)) $



sng lengthPatPairs = foldr ($) glues 
	where glues =  map (glue) $ zip progTimes pats
		glue lenPatTuple = wm totalLength (fst lenPatTuple) (snd lenPatTuple)
		totalLength = tail progTimes --fold (+) times
		progTimes = scanl1 (+) $ times
		times = fst $ unzip lengthPatPairs
		pats = snd $ unzip lengthPatPairs
		wm a b p = whenmod a b (const p)

let drums p = note p #s "midi" #midichan 0 #octave 3
    wm a b p = whenmod a b (const p)
    sng cL c pL p vL v = wm l (vL+pL) c $ wm l vL p $ v
    	where l = cL+vL+pL
    snpt = "{ ~ <1 . 1 . 1 . ~ 1> }%2"
    kkpt = "{<0 . 0 . 0*2 . 0 ~@2 0>}%2"
    hhpt = "{2 2 . <3 . ~ 2 . 3 . 2 2*3> 2 2 }%2"
    blue = "{d, e, f, g, a, bs, cs,d, fs, a}" :: Pattern Note
    green = "{d, e, f, g, a, as, c}" :: Pattern Note
    prog = sng 16 green 8 blue 16 blue 
    fp = fingerpick prog
    synth p = note (fp $ p) #s "midi" #midichan 2 #octave 4
    synth2 p = note (fp $ p) #s "midi" #midichan 4 #octave 4
    synth3 p = note (fp $ p) #s "midi" #midichan 5 #octave 4
    synth4 p = note (fp $ p) #s "midi" #midichan 6 #octave 5
    bass p = note (fp $ p) #s "midi" #midichan 1 #octave 4
    chchord = wm 8 5 ( synth ("{<11 [~ 10]>, [~@3 9], 5, 4}":: Pattern Int)) $ wm 5 2 (synth2 ("{<10 9 8 7 5>,<2 ~>,<~ 4>,7}":: Pattern Int)) $ synth3 ("[<0 -1 -2 -3 -4>,<[10 ~ 9 ~] ~>]" + (iter 8 $ run 8) ::Pattern Int)
    prchord = wm 4 3 "{5,9,11,14}" "{10,2,4,7}" :: Pattern Int
    vschord = (-| "<8 8 8 8 5 [5 4] 9 6>") $ whenmod 5 3 (+| "{0 . 1 2 3}%1") $ "<{0, 2, 5, 9} ~>" :: Pattern Int
    bbass =  bass $ mask (binary 2343) $ plyWith 4 (|+ "<1 3 2 4>") $ "{1,10,5,8}" 
in
do
d1 $ whenmod 16 14 (const silence) $ stack [
	drums $ sng 16 (wm 8 5 silence $ kkpt) 8 (iter 8 $ slow 7 $ kkpt + "9 10 11") 16 kkpt,
	every 4 (sometimes ghost) $ drums $ snpt,
	drums $ sng 16 (wm 8 5 silence $ hhpt) 8 "2*<1 2 3 4 5 6 7 8>" 16 (wm 16 8 hhpt $ silence), 
	drums $ sng 16 (wm 8 5 silence $ (iter 8 $ run 8)) 8 silence 16 ( wm 16 12 ( struct (binary 2244) $ irand 16) silence)
	]
d2 $ sng 
	16 (chchord) 
	8  (synth3 $ prchord) 
	16 (whenmod 8 7 ((# midichan 3).(plyWith 3 (|+ note 2))) $ synth vschord)
d3 $ sng 16 silence 8 bbass 16 silence
d4 $ sng 16 (wm 8 5 (synth4 $ mask (binary 2949) $ plyWith 4 (|+ "<0 -1 0 4>") $ "{7,9,10}") silence ) 8 silence 16 silence

