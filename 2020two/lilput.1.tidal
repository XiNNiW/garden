:script "_functions.hs"
  
:t unzip
  
hush

let drums p = note p #s "midi" #midichan 0 #octave 3
    wm a b p = whenmod a b (const p)
    sng cL c pL p vL v = wm l (vL+pL) c $ wm l vL p $ v
        where l = cL+vL+pL
    sngx cL c pL p vL v = (whenmod l (vL+pL) c) . (whenmod l vL p) . v
        where l = cL+vL+pL
    yellow = stack ["c'maj9", "[c,e,g,f,fs,b,a,d]"] :: Pattern Note
    pastel = stack ["[cs,gs,f,ds,b]"+(slow 2 "<0 3 6 9>")] :: Pattern Note
    fuzz = stack [slow 4 "<f'm11>"] :: Pattern Note
    prog = sng 12 yellow 8 pastel 16 fuzz 
    fp = fingerpick prog
    synth p = note (fp $ p) #s "midi" #midichan 2 #octave 4
    synth2 p = note (fp $ p) #s "midi" #midichan 4 #octave 4
    synth3 p = note (fp $ p) #s "midi" #midichan 5 #octave 3
    bin1 = binary (sng 12 ("2342"+"<1 2 3 4>") 8 ("2342") 16 ("34243"+"<1 2 3 4>"))
    bin2 = binary (sng 12 "4444" 8 "323" 16 "<14141 12452>")
    swng = sngx 12 (every 4 $ struct "1(4, 4) 1(<4 3 1 <2 4>>,<4 <2 <7 1>>>,<0 5>)") 8 (every 4 $ struct "1(4,5) 1(3,5)") 16 (every 16 (struct "1(6,7) 1(4,7)"))
in
do
d1 $ drums $ sng 12 ( stack ["0*4", wm 8 5 "[~ <2 [~ 1]> . [2*2 2*3] ]*2" "~"]) 8 silence 16 silence
d2 $ sng 12 silence 8 ((synth3 $ wm 5 4 "[~ 0] 0 . 0" "0") #legato 0.5) 16 silence
d3 $ sng 12 (synth $ "[~ . ~ -2 . 0 2 .[ 0 4 ]<8 [~ -5] >]") 8  (silence) 16 (synth2 "{0, 2 3 5}%4")
