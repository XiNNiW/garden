)

let 
ov fx p = overlay (fx p) p 
ife a c b = inside a (foldEvery c (b)) 
in
d1  
-- $ ov (+| note "1 2")
-- $ plyWith "<2 5 3 <2 8>>" (|* velocity 0.2) 
$ note (
    ov (press . foldEvery [2,3] (+ "[2, 1 2 3]") ) $ "0 1" +"0(<3 1 0 1>, 8)"
)
-- $ plyWith "<2 5 3 <2 8>>" (|* velocity 0.8) 
-- $ foldEvery [3,5] (overlay $ note (press "<2(3,8,4) [1,2 5(3,4)]>")) 
# s "midi" #octave 3
# cps "<0.8 1 0.33333 [0.1 0.75]>"
-- # cc 2 tri

hush

setbpm 93

let
prog = "<c cs c [g ds . as]>"
flav = "<min7 m6 sus2 [min7 maj7 . <m11 m6>]>"
scale = getScale (scaleTable ++ chordTable)
oe a c b = outside a (every (round <$> c) (b))
tonal rr mm = note . (|+ rr) . scale mm
in
d1 
-- $ (foldEvery [2,3] rev.plyWith "<2 6 3 <2 8>>" ((|* legato 0.8).(|* velocity 0.6)) )
$ fast 2
$ stack [ 
     oe 4 2 (ie 4 (const silence)) $ note "0(<1 0 1 3>, 8)"
    ,slow 2 $ note "~ <1 1 1 <[1,2 3 1] [2 1]>>"
    , note "2 <2 [3 2]>"
    ,note( 
        (|+ prog ) $ 
        scale flav $ 
        condFx "t(3,8)" (press . foldEvery [2,3] (+ "<0 1> -1") ) $
        "0(<2 5 1 3>,8, 5)"  
    ) #midichan 1 # legato 0.125
    , oe 4 2 (const silence) $ note (
        press $ (|+ prog) $ (|+ 24) $ scale flav $  (snowball 4 ((+).(`rem` 8)) ((+ "-1 1 -4"). (slow 1.5)) )$ (run 3) + "2"
        ) #midichan 2 
    -- , (|+ note 36) $ note (scale flav $ (|+ prog) $ "[0,1,2,3] [0,1,2,3]*2") #midichan 2
    ] # s "midi" #octave 4


-- correllated

let 
    cye _ _ _ 0 = False
    cye h l r n = ((< h).(`rem` l).(*h).(+r)) $ n
in 
d1 $ fast 16 $ when (cye "<3 5 0 3>" 8 0) (const "bd") $ silence


hush


cye _ _ _ 0 = False

cye h l r n = ((+r).(*h).(rem l).(> h)) $ n